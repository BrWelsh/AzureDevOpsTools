<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- Update this version number to adopt a new default version of NetAnalyzers -->
    <NetAnalyzersVersion Condition=" '$(NetAnalyzersVersion)' == '' ">5.0.3</NetAnalyzersVersion>
  </PropertyGroup>

  <PropertyGroup>
    <!-- 
        Use the methods provided by System.IO.Path to build the various paths. Doing so ensures paths are assembled 
        correctly regardless of operating system since the plan is to include linux for builds of dotnet core components
        -->
    <WnsProjectDirectory>$([System.IO.Path]::GetFullPath($([System.IO.Path]::Combine($(MSBuildThisFileDirectory), "../"))))</WnsProjectDirectory>
    <WnsProjectBuildDirectory>$([System.IO.Path]::Combine($(WnsProjectDirectory), "build"))</WnsProjectBuildDirectory>
    <WnsProjectDocsDirectory>$([System.IO.Path]::Combine($(WnsProjectDirectory), "docs"))</WnsProjectDocsDirectory>
    <WnsProjectToolsDirectory>$([System.IO.Path]::Combine($(WnsProjectDirectory), "tools"))</WnsProjectToolsDirectory>
    <WnsSolutionDir>$([System.IO.Path]::Combine($(WnsProjectDirectory), "source"))</WnsSolutionDir>

    <IsUnitTestProject>$(MSBuildProjectName.Contains('.UnitTest'))</IsUnitTestProject>
    <IsTestProject>$(MSBuildProjectName.EndsWith('.Tests'))</IsTestProject>
    <IsFakesProject>$(MSBuildProjectName.Contains('.Fakes'))</IsFakesProject>
    
  </PropertyGroup>

  <PropertyGroup>
    <TreatWarningsAsErrors Condition=" '$(Configuration)' == 'Release' ">true</TreatWarningsAsErrors>
    <TreatWarningsAsErrors Condition=" '$(Configuration)' == 'Debug' ">false</TreatWarningsAsErrors>
    <NoWarn>$(nowarn),CS1998,3024</NoWarn>
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Nerdbank.GitVersioning" Version="3.4.231" PrivateAssets="all" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
    <!--<PackageReference Include="Microsoft.SourceLink.AzureRepos.Git" Version="1.0.0" PrivateAssets="all" />-->

    <Compile Include="$(MSBuildThisFileDirectory)Common\CommonAssemblyInfo.cs" LinkBase="Properties" />
  </ItemGroup>
  

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="$(NetAnalyzersVersion)">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>

    <PackageReference Include="Roslynator.Analyzers" Version="3.2.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>

    <PackageReference Include="Roslynator.CodeAnalysis.Analyzers" Version="1.1.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>

    <PackageReference Include="Roslynator.Formatting.Analyzers" Version="1.2.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>

    <PackageReference Include="Roslynator.CSharp" Version="2.1.0">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <PropertyGroup>
    <ReleaseChannel Condition="'$(ReleaseChannel)' == '' ">Debug</ReleaseChannel>
  </PropertyGroup>

  <PropertyGroup>
    <DefineConstants Condition="'$(ReleaseChannel)' == 'Alpha' ">$(DefineConstants);STORE</DefineConstants>
    <DefineConstants Condition="'$(ReleaseChannel)' == 'Release' ">$(DefineConstants);ZIP</DefineConstants>
    <DefineConstants Condition="'$(ReleaseChannel)' == 'Debug' ">$(DefineConstants);ZIP</DefineConstants>
  </PropertyGroup>

  <!-- https://github.com/NuGet/Home/issues/4337 -->
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' == 'true' ">
    <Import Project="$(NuGetPackageRoot)nerdbank.gitversioning\$(NerdbankGitVersioningVersion)\buildCrossTargeting\Nerdbank.GitVersioning.targets"
            Condition="Exists('$(NuGetPackageRoot)nerdbank.gitversioning\$(NerdbankGitVersioningVersion)\buildCrossTargeting\Nerdbank.GitVersioning.targets')" />
  </ImportGroup>
  <Target Name="FixUpVersion"
          BeforeTargets="_GenerateRestoreProjectSpec"
          DependsOnTargets="GetBuildVersion"
          Condition=" '$(NerdbankGitVersioningTasksPath)' != '' " />

  <Import Project="$(MSBuildSDKExtrasTargets)" Condition="Exists('$(MSBuildSDKExtrasTargets)')" />
  <!-- workaround for https://github.com/NuGet/Home/issues/5894 -->
  <Import Project="obj\*.targets" Condition=" '$(MSBuildProjectExtension)' == '.tmp_proj'" />

</Project>
